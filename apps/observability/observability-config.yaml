apiVersion: v1
data:
  grafana-datasources.yaml: |
    apiVersion: 1

    datasources:
      - name: Prometheus
        type: prometheus
        uid: prometheus
        access: proxy
        orgId: 1
        url: http://prometheus:9090
        basicAuth: false
        isDefault: false
        version: 1
        editable: false
        jsonData:
          httpMethod: GET

      - name: Tempo
        type: tempo
        uid: tempo
        access: proxy
        orgId: 1
        url: http://tempo:3200
        basicAuth: false
        isDefault: true
        version: 1
        editable: false
        apiVersion: 1
        jsonData:
          httpMethod: GET
          serviceMap:
            datasourceUid: prometheus
          streamingEnabled:
            search: true

      - name: Loki
        type: loki
        uid: loki
        access: proxy
        orgId: 1
        url: http://loki:3100
        basicAuth: false
        isDefault: false
        version: 1
        editable: false
        jsonData:
          httpMethod: GET
          derivedFields:
            - datasourceUid: tempo
              matcherRegex: "traceID=(\\w+)"
              name: TraceID
              url: "$${__value.raw}"
          maxLines: 1000
          # Add custom header to avoid org_id=fake
          httpHeaderName1: "X-Scope-OrgID"
        secureJsonData:
          httpHeaderValue1: "1"
  loki-config.yaml: |
    auth_enabled: false

    server:
      http_listen_port: 3100

    common:
      path_prefix: /tmp/loki
      storage:
        filesystem:
          chunks_directory: /tmp/loki/chunks
          rules_directory: /tmp/loki/rules
      replication_factor: 1
      ring:
        instance_addr: 127.0.0.1
        kvstore:
          store: inmemory

    schema_config:
      configs:
        - from: 2020-10-24
          store: boltdb-shipper # Keep this for now
          object_store: filesystem
          schema: v11 # Keep this for now
          index:
            prefix: index_
            period: 24h

    # ADD THIS NEW SECTION to disable structured metadata
    limits_config:
      allow_structured_metadata: false

    # Optional: Keep this if you want
    ruler:
      alertmanager_url: http://localhost:9093
  otel-collector-config.yaml: |
    extensions:
      health_check: {}
      zpages: {}

    receivers:
      otlp:
        protocols:
          http:
            endpoint: 0.0.0.0:4318

    exporters:
      otlp/tempo:
        endpoint: "http://tempo:4317"
        tls:
          insecure: true
      prometheus:
        endpoint: 0.0.0.0:8889
        namespace: otel
        const_labels:
          exporter: otel-collector
      debug:
        verbosity: detailed

    processors:
      batch:
        timeout: 1s
        send_batch_size: 100

    service:
      pipelines:
        traces:
          receivers: [otlp]
          processors: [batch]
          exporters: [otlp/tempo]
        metrics:
          receivers: [otlp]
          processors: [batch]
          exporters: [prometheus]
  prometheus.yml: |
    # prometheus/prometheus.yml
    global:
      scrape_interval: 15s
      evaluation_interval: 15s

    scrape_configs:
      - job_name: 'otel-collector'
        static_configs:
          - targets: ['otel-collector:8889'] # Scrape collector metrics
      # - job_name: 'prometheus'
      #   static_configs:
      #     - targets: ['localhost:9090'] # Scrape itself
  promtail-config.yaml: |
    server:
      http_listen_port: 9080
      grpc_listen_port: 0

    positions:
      filename: /tmp/positions.yaml # remembers file offset across restarts

    clients:
      - url: http://loki:3100/loki/api/v1/push
        tenant_id: docker-compose # optional, becomes Loki label

    scrape_configs:
      # ---------- Docker JSON logs ----------
      - job_name: docker
        static_configs:
          - targets: [localhost] # required by Promtail
            labels:
              region: local
              service_name: rest_api_nodejs_typescript
              env: dev
              __path__: /var/lib/docker/containers/*/*log # Docker JSON driver path

        pipeline_stages:
          - json: # parse Docker JSON log line
              expressions:
                output: log
                stream: stream
                attrs: attrs
          - json: # unpack attrs (container_name, tag, â€¦)
              expressions:
                container_name: attrs.tag
                service_name: attrs.service
              source: attrs
          - timestamp: # use the timestamp Docker recorded
              format: RFC3339Nano
              source: time
          - labels: # promote to indexed Loki labels
              container_name: api_c
              service_name: api_rest_node_typescript_promtail
              stream:
          - output:
              source: output # send only the message part to Loki
  tempo.yaml: |
    stream_over_http_enabled: true
    server:
      http_listen_port: 3200
      log_level: info

    distributor:
      receivers:
        otlp:
          protocols:
            grpc:
              endpoint: 0.0.0.0:4317
            http:
              endpoint: 0.0.0.0:4318
      ring:
        kvstore:
          store: inmemory

    memberlist:
      join_members: []
      abort_if_cluster_join_fails: false
      bind_port: 0

    ingester:
      trace_idle_period: 10s
      max_block_bytes: 1_000_000
      max_block_duration: 5m
      lifecycler:
        ring:
          kvstore:
            store: inmemory
          replication_factor: 1

    compactor:
      compaction:
        block_retention: 24h

    metrics_generator:
      registry:
        external_labels:
          source: tempo
          cluster: docker-compose
      storage:
        path: /var/tempo/generator/wal
        remote_write:
          - url: http://prometheus:9090/api/v1/write
            send_exemplars: true
      traces_storage:
        path: /var/tempo/generator/traces

    storage:
      trace:
        backend: local
        local:
          path: /tmp/tempo/blocks
        wal:
          path: /tmp/tempo/wal
    overrides:
      defaults:
        metrics_generator:
          processors: [service-graphs, span-metrics, local-blocks] # enables metrics generator
          generate_native_histograms: both
kind: ConfigMap
metadata:
  name: observability-config
  namespace: wallet-app
